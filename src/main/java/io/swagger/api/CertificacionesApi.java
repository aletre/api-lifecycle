/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.12).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Certificacion;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-04-11T21:33:42.076Z")

@Api(value = "certificaciones", description = "the certificaciones API")
public interface CertificacionesApi {

    @ApiOperation(value = "Actualiza una Certificación por ID", nickname = "actualizarCertificacionPorId", notes = "Actualiza una Certificación por ID", response = Object.class, tags={ "certificaciones", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Certificación actualizada correctamente", response = Object.class) })
    @RequestMapping(value = "/certificaciones/{idCertificacion}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Object> actualizarCertificacionPorId(@ApiParam(value = "ID de la Certificación a editar",required=true) @PathVariable("idCertificacion") String idCertificacion);


    @ApiOperation(value = "Crea una nueva Certificación", nickname = "crearCertificacion", notes = "Crea una nueva Certificación", tags={ "certificaciones", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/certificaciones",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> crearCertificacion(@ApiParam(value = "Objeto Certificacion" ,required=true )  @Valid @RequestBody Certificacion certificacion);


    @ApiOperation(value = "Elimina una Certificación", nickname = "deleteCertificacionPorId", notes = "Elimina una Certificación", tags={ "certificaciones", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Petición inválida"),
        @ApiResponse(code = 404, message = "Certificación no encontrada") })
    @RequestMapping(value = "/certificaciones/{idCertificacion}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCertificacionPorId(@ApiParam(value = "ID de la Certificación a eliminar",required=true) @PathVariable("idCertificacion") String idCertificacion);


    @ApiOperation(value = "Listado de Certificaciones obtenidas por Jade", nickname = "listarCertificaciones", notes = "Lista las certificaciones obtenidas por la Jade", response = Certificacion.class, responseContainer = "List", tags={ "certificaciones", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operacion correcta", response = Certificacion.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/certificaciones",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Certificacion>> listarCertificaciones(@ApiParam(value = "Texto para filtrar por nombres de Certificaciones") @Valid @RequestParam(value = "q", required = false) String q);


    @ApiOperation(value = "Devuelve el detalle de una Certificación", nickname = "obtenerCertificacionPorId", notes = "Devuelve el detalle de una Certificación por ID", response = Object.class, tags={ "certificaciones", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operacion correcta", response = Object.class),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/certificaciones/{idCertificacion}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Object> obtenerCertificacionPorId(@ApiParam(value = "ID de la Certificación a buscar",required=true) @PathVariable("idCertificacion") String idCertificacion);

}
