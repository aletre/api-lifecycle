/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.12).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Boda;
import io.swagger.model.Servicio;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-04-11T21:33:42.076Z")

@Api(value = "bodas", description = "the bodas API")
public interface BodasApi {

    @ApiOperation(value = "actualizar servicios de la boda", nickname = "actualizarBoda", notes = "actualizar los servicios de una boda", response = Object.class, tags={ "bodas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "boda actualizada correctamente", response = Object.class) })
    @RequestMapping(value = "/bodas/{idBoda}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Object> actualizarBoda(@ApiParam(value = "id de la boda a actualizar",required=true) @PathVariable("idBoda") String idBoda,@ApiParam(value = "servicios a añadir" ,required=true )  @Valid @RequestBody Servicio servicesToUpdate);


    @ApiOperation(value = "bodas registradas en el sistema", nickname = "buscarBoda", notes = "bodas registradas disponibles", response = Boda.class, responseContainer = "List", tags={ "bodas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "bodas encontradas", response = Boda.class, responseContainer = "List") })
    @RequestMapping(value = "/bodas",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Boda>> buscarBoda(@ApiParam(value = "filtro a aplicar para buscar bodas específicas") @Valid @RequestParam(value = "filtroBodas", required = false) String filtroBodas);


    @ApiOperation(value = "Crea una nueva boda", nickname = "crearBoda", notes = "Crea una nueva boda", tags={ "bodas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/bodas",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> crearBoda(@ApiParam(value = "Objeto Boda" ,required=true )  @Valid @RequestBody Boda boda);


    @ApiOperation(value = "Borra una boda", nickname = "deleteBoda", notes = "Elimina una boda", tags={ "bodas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "In incorrecto"),
        @ApiResponse(code = 404, message = "Boda no encontrada") })
    @RequestMapping(value = "/bodas/{idBoda}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteBoda(@ApiParam(value = "Id de la boda a eliminar",required=true) @PathVariable("idBoda") String idBoda);


    @ApiOperation(value = "boda específica registrada", nickname = "obtenerBoda", notes = "boda específica registrada", response = Object.class, tags={ "bodas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "boda actualizada correctamente", response = Object.class) })
    @RequestMapping(value = "/bodas/{idBoda}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Object> obtenerBoda(@ApiParam(value = "id de la boda a actualizar",required=true) @PathVariable("idBoda") String idBoda);

}
